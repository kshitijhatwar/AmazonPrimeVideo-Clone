pipeline {
    agent any
    
    
    tools {
        jdk 'JDK'
        nodejs 'NodeJS'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    stages {
        stage('1. Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/kshitijhatwar/AmazonPrimeVideo-Clone.git'
            }
        }
        
        stage('2. SonarQube Analysis') {
            steps {
                withSonarQubeEnv ('sonar-server') {
                    sh """
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=amazon-prime \
                    -Dsonar.projectKey=amazon-prime
                    """
                }
            }
        }
        
        stage('3. Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, 
                credentialsId: 'sonar-token'
            }
        }
        
        stage('4. Install npm') {
            steps {
                sh "npm install"
            }
        }
        
        stage('5. Trivy Scan') {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        
        stage('6. Build Docker Image') {
            steps {
                sh "docker build -t kshitijhatwar/AmazonePrimeVideoClone:v1.$BUILD_ID ."
                sh "docker build -t kshitijhatwar/AmazonePrimeVideoClone:latest ."
            }
        }
        
        
        stage('7. Push Image to dockerhub') {
            steps{
                withCredentials([string(credentialsId: 'docker-token', variable: 'docker-tok')]) {
                sh "docker login -u kshitijhatwar -p ${docker-tok}"
                sh "docker image push kshitijhatwar/AmazonePrimeVideoClone:v1.$BUILD_ID"
                sh "docker image push kshitijhatwar/AmazonePrimeVideoClone:latest"
                sh "docker rmi AmazonePrimeVideoClone:v1.$BUILD_ID kshitijhatwar/AmazonePrimeVideoClone:v1.$BUILD_ID kshitijhatwar/AmazonePrimeVideoClone:latest"
                }
        }
    }
}
